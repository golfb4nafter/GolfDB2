#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GolfDB2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GolfDB20161207-01")]
	public partial class TeeTimeDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTeeTime(TeeTime instance);
    partial void UpdateTeeTime(TeeTime instance);
    partial void DeleteTeeTime(TeeTime instance);
    #endregion
		
		public TeeTimeDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["GolfDB20161207_01ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TeeTimeDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TeeTimeDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TeeTimeDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TeeTimeDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TeeTime> TeeTimes
		{
			get
			{
				return this.GetTable<TeeTime>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeeTime")]
	public partial class TeeTime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _TeeTimeOffset;
		
		private System.DateTime _Tee_Time;
		
		private int _CourseId;
		
		private int _EventId;
		
		private string _ReservedByName;
		
		private string _TelephoneNumber;
		
		private int _HoleId;
		
		private int _NumberOfPlayers;
		
		private string _PlayerNames;
		
		private EntityRef<TeeTime> _TeeTime2;
		
		private EntityRef<TeeTime> _TeeTime1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTeeTimeOffsetChanging(int value);
    partial void OnTeeTimeOffsetChanged();
    partial void OnTee_TimeChanging(System.DateTime value);
    partial void OnTee_TimeChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnEventIdChanging(int value);
    partial void OnEventIdChanged();
    partial void OnReservedByNameChanging(string value);
    partial void OnReservedByNameChanged();
    partial void OnTelephoneNumberChanging(string value);
    partial void OnTelephoneNumberChanged();
    partial void OnHoleIdChanging(int value);
    partial void OnHoleIdChanged();
    partial void OnNumberOfPlayersChanging(int value);
    partial void OnNumberOfPlayersChanged();
    partial void OnPlayerNamesChanging(string value);
    partial void OnPlayerNamesChanged();
    #endregion
		
		public TeeTime()
		{
			this._TeeTime2 = default(EntityRef<TeeTime>);
			this._TeeTime1 = default(EntityRef<TeeTime>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._TeeTime1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeeTimeOffset", DbType="Int NOT NULL")]
		public int TeeTimeOffset
		{
			get
			{
				return this._TeeTimeOffset;
			}
			set
			{
				if ((this._TeeTimeOffset != value))
				{
					this.OnTeeTimeOffsetChanging(value);
					this.SendPropertyChanging();
					this._TeeTimeOffset = value;
					this.SendPropertyChanged("TeeTimeOffset");
					this.OnTeeTimeOffsetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tee_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Tee_Time
		{
			get
			{
				return this._Tee_Time;
			}
			set
			{
				if ((this._Tee_Time != value))
				{
					this.OnTee_TimeChanging(value);
					this.SendPropertyChanging();
					this._Tee_Time = value;
					this.SendPropertyChanged("Tee_Time");
					this.OnTee_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL")]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Int NOT NULL")]
		public int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservedByName", DbType="NVarChar(128)")]
		public string ReservedByName
		{
			get
			{
				return this._ReservedByName;
			}
			set
			{
				if ((this._ReservedByName != value))
				{
					this.OnReservedByNameChanging(value);
					this.SendPropertyChanging();
					this._ReservedByName = value;
					this.SendPropertyChanged("ReservedByName");
					this.OnReservedByNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelephoneNumber", DbType="NChar(80)")]
		public string TelephoneNumber
		{
			get
			{
				return this._TelephoneNumber;
			}
			set
			{
				if ((this._TelephoneNumber != value))
				{
					this.OnTelephoneNumberChanging(value);
					this.SendPropertyChanging();
					this._TelephoneNumber = value;
					this.SendPropertyChanged("TelephoneNumber");
					this.OnTelephoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoleId", DbType="Int NOT NULL")]
		public int HoleId
		{
			get
			{
				return this._HoleId;
			}
			set
			{
				if ((this._HoleId != value))
				{
					this.OnHoleIdChanging(value);
					this.SendPropertyChanging();
					this._HoleId = value;
					this.SendPropertyChanged("HoleId");
					this.OnHoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfPlayers", DbType="Int NOT NULL")]
		public int NumberOfPlayers
		{
			get
			{
				return this._NumberOfPlayers;
			}
			set
			{
				if ((this._NumberOfPlayers != value))
				{
					this.OnNumberOfPlayersChanging(value);
					this.SendPropertyChanging();
					this._NumberOfPlayers = value;
					this.SendPropertyChanged("NumberOfPlayers");
					this.OnNumberOfPlayersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerNames", DbType="NVarChar(256)")]
		public string PlayerNames
		{
			get
			{
				return this._PlayerNames;
			}
			set
			{
				if ((this._PlayerNames != value))
				{
					this.OnPlayerNamesChanging(value);
					this.SendPropertyChanging();
					this._PlayerNames = value;
					this.SendPropertyChanged("PlayerNames");
					this.OnPlayerNamesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeeTime_TeeTime", Storage="_TeeTime2", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false)]
		public TeeTime TeeTime2
		{
			get
			{
				return this._TeeTime2.Entity;
			}
			set
			{
				TeeTime previousValue = this._TeeTime2.Entity;
				if (((previousValue != value) 
							|| (this._TeeTime2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeeTime2.Entity = null;
						previousValue.TeeTime1 = null;
					}
					this._TeeTime2.Entity = value;
					if ((value != null))
					{
						value.TeeTime1 = this;
					}
					this.SendPropertyChanged("TeeTime2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeeTime_TeeTime", Storage="_TeeTime1", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public TeeTime TeeTime1
		{
			get
			{
				return this._TeeTime1.Entity;
			}
			set
			{
				TeeTime previousValue = this._TeeTime1.Entity;
				if (((previousValue != value) 
							|| (this._TeeTime1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeeTime1.Entity = null;
						previousValue.TeeTime2 = null;
					}
					this._TeeTime1.Entity = value;
					if ((value != null))
					{
						value.TeeTime2 = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(int);
					}
					this.SendPropertyChanged("TeeTime1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
