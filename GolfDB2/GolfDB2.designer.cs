#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GolfDB2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GolfDB20161207-01")]
	public partial class GolfDB2DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTeeTime(TeeTime instance);
    partial void UpdateTeeTime(TeeTime instance);
    partial void DeleteTeeTime(TeeTime instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertHole(Hole instance);
    partial void UpdateHole(Hole instance);
    partial void DeleteHole(Hole instance);
    partial void InsertHoleList(HoleList instance);
    partial void UpdateHoleList(HoleList instance);
    partial void DeleteHoleList(HoleList instance);
    partial void InsertGlobalSetting(GlobalSetting instance);
    partial void UpdateGlobalSetting(GlobalSetting instance);
    partial void DeleteGlobalSetting(GlobalSetting instance);
    partial void InsertScoreEntry(ScoreEntry instance);
    partial void UpdateScoreEntry(ScoreEntry instance);
    partial void DeleteScoreEntry(ScoreEntry instance);
    partial void InsertTeeTimeDetail(TeeTimeDetail instance);
    partial void UpdateTeeTimeDetail(TeeTimeDetail instance);
    partial void DeleteTeeTimeDetail(TeeTimeDetail instance);
    partial void InsertScoreCard(ScoreCard instance);
    partial void UpdateScoreCard(ScoreCard instance);
    partial void DeleteScoreCard(ScoreCard instance);
    partial void InsertEventDetail(EventDetail instance);
    partial void UpdateEventDetail(EventDetail instance);
    partial void DeleteEventDetail(EventDetail instance);
    #endregion
		
		public GolfDB2DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["GolfDB20161207_01ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public GolfDB2DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GolfDB2DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GolfDB2DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GolfDB2DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TeeTime> TeeTimes
		{
			get
			{
				return this.GetTable<TeeTime>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<Hole> Holes
		{
			get
			{
				return this.GetTable<Hole>();
			}
		}
		
		public System.Data.Linq.Table<HoleList> HoleLists
		{
			get
			{
				return this.GetTable<HoleList>();
			}
		}
		
		public System.Data.Linq.Table<GlobalSetting> GlobalSettings
		{
			get
			{
				return this.GetTable<GlobalSetting>();
			}
		}
		
		public System.Data.Linq.Table<ScoreEntry> ScoreEntries
		{
			get
			{
				return this.GetTable<ScoreEntry>();
			}
		}
		
		public System.Data.Linq.Table<TeeTimeDetail> TeeTimeDetails
		{
			get
			{
				return this.GetTable<TeeTimeDetail>();
			}
		}
		
		public System.Data.Linq.Table<ScoreCard> ScoreCards
		{
			get
			{
				return this.GetTable<ScoreCard>();
			}
		}
		
		public System.Data.Linq.Table<EventDetail> EventDetails
		{
			get
			{
				return this.GetTable<EventDetail>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeeTime")]
	public partial class TeeTime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _TeeTimeOffset;
		
		private System.DateTime _Tee_Time;
		
		private int _CourseId;
		
		private int _EventId;
		
		private string _ReservedByName;
		
		private string _TelephoneNumber;
		
		private int _HoleId;
		
		private int _NumberOfPlayers;
		
		private string _PlayerNames;
		
		private EntityRef<TeeTime> _TeeTime2;
		
		private EntitySet<TeeTimeDetail> _TeeTimeDetails;
		
		private EntityRef<TeeTime> _TeeTime1;
		
		private EntityRef<Hole> _Hole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTeeTimeOffsetChanging(int value);
    partial void OnTeeTimeOffsetChanged();
    partial void OnTee_TimeChanging(System.DateTime value);
    partial void OnTee_TimeChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnEventIdChanging(int value);
    partial void OnEventIdChanged();
    partial void OnReservedByNameChanging(string value);
    partial void OnReservedByNameChanged();
    partial void OnTelephoneNumberChanging(string value);
    partial void OnTelephoneNumberChanged();
    partial void OnHoleIdChanging(int value);
    partial void OnHoleIdChanged();
    partial void OnNumberOfPlayersChanging(int value);
    partial void OnNumberOfPlayersChanged();
    partial void OnPlayerNamesChanging(string value);
    partial void OnPlayerNamesChanged();
    #endregion
		
		public TeeTime()
		{
			this._TeeTime2 = default(EntityRef<TeeTime>);
			this._TeeTimeDetails = new EntitySet<TeeTimeDetail>(new Action<TeeTimeDetail>(this.attach_TeeTimeDetails), new Action<TeeTimeDetail>(this.detach_TeeTimeDetails));
			this._TeeTime1 = default(EntityRef<TeeTime>);
			this._Hole = default(EntityRef<Hole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._TeeTime1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeeTimeOffset", DbType="Int NOT NULL")]
		public int TeeTimeOffset
		{
			get
			{
				return this._TeeTimeOffset;
			}
			set
			{
				if ((this._TeeTimeOffset != value))
				{
					this.OnTeeTimeOffsetChanging(value);
					this.SendPropertyChanging();
					this._TeeTimeOffset = value;
					this.SendPropertyChanged("TeeTimeOffset");
					this.OnTeeTimeOffsetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tee_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Tee_Time
		{
			get
			{
				return this._Tee_Time;
			}
			set
			{
				if ((this._Tee_Time != value))
				{
					this.OnTee_TimeChanging(value);
					this.SendPropertyChanging();
					this._Tee_Time = value;
					this.SendPropertyChanged("Tee_Time");
					this.OnTee_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL")]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Int NOT NULL")]
		public int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservedByName", DbType="NVarChar(128)")]
		public string ReservedByName
		{
			get
			{
				return this._ReservedByName;
			}
			set
			{
				if ((this._ReservedByName != value))
				{
					this.OnReservedByNameChanging(value);
					this.SendPropertyChanging();
					this._ReservedByName = value;
					this.SendPropertyChanged("ReservedByName");
					this.OnReservedByNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelephoneNumber", DbType="NChar(80)")]
		public string TelephoneNumber
		{
			get
			{
				return this._TelephoneNumber;
			}
			set
			{
				if ((this._TelephoneNumber != value))
				{
					this.OnTelephoneNumberChanging(value);
					this.SendPropertyChanging();
					this._TelephoneNumber = value;
					this.SendPropertyChanged("TelephoneNumber");
					this.OnTelephoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoleId", DbType="Int NOT NULL")]
		public int HoleId
		{
			get
			{
				return this._HoleId;
			}
			set
			{
				if ((this._HoleId != value))
				{
					if (this._Hole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHoleIdChanging(value);
					this.SendPropertyChanging();
					this._HoleId = value;
					this.SendPropertyChanged("HoleId");
					this.OnHoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfPlayers", DbType="Int NOT NULL")]
		public int NumberOfPlayers
		{
			get
			{
				return this._NumberOfPlayers;
			}
			set
			{
				if ((this._NumberOfPlayers != value))
				{
					this.OnNumberOfPlayersChanging(value);
					this.SendPropertyChanging();
					this._NumberOfPlayers = value;
					this.SendPropertyChanged("NumberOfPlayers");
					this.OnNumberOfPlayersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerNames", DbType="NVarChar(256)")]
		public string PlayerNames
		{
			get
			{
				return this._PlayerNames;
			}
			set
			{
				if ((this._PlayerNames != value))
				{
					this.OnPlayerNamesChanging(value);
					this.SendPropertyChanging();
					this._PlayerNames = value;
					this.SendPropertyChanged("PlayerNames");
					this.OnPlayerNamesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeeTime_TeeTime", Storage="_TeeTime2", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false)]
		public TeeTime TeeTime2
		{
			get
			{
				return this._TeeTime2.Entity;
			}
			set
			{
				TeeTime previousValue = this._TeeTime2.Entity;
				if (((previousValue != value) 
							|| (this._TeeTime2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeeTime2.Entity = null;
						previousValue.TeeTime1 = null;
					}
					this._TeeTime2.Entity = value;
					if ((value != null))
					{
						value.TeeTime1 = this;
					}
					this.SendPropertyChanged("TeeTime2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeeTime_TeeTimeDetail", Storage="_TeeTimeDetails", ThisKey="Id", OtherKey="TeeTimeId")]
		public EntitySet<TeeTimeDetail> TeeTimeDetails
		{
			get
			{
				return this._TeeTimeDetails;
			}
			set
			{
				this._TeeTimeDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeeTime_TeeTime", Storage="_TeeTime1", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public TeeTime TeeTime1
		{
			get
			{
				return this._TeeTime1.Entity;
			}
			set
			{
				TeeTime previousValue = this._TeeTime1.Entity;
				if (((previousValue != value) 
							|| (this._TeeTime1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeeTime1.Entity = null;
						previousValue.TeeTime2 = null;
					}
					this._TeeTime1.Entity = value;
					if ((value != null))
					{
						value.TeeTime2 = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(int);
					}
					this.SendPropertyChanged("TeeTime1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hole_TeeTime", Storage="_Hole", ThisKey="HoleId", OtherKey="Id", IsForeignKey=true)]
		public Hole Hole
		{
			get
			{
				return this._Hole.Entity;
			}
			set
			{
				Hole previousValue = this._Hole.Entity;
				if (((previousValue != value) 
							|| (this._Hole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hole.Entity = null;
						previousValue.TeeTimes.Remove(this);
					}
					this._Hole.Entity = value;
					if ((value != null))
					{
						value.TeeTimes.Add(this);
						this._HoleId = value.Id;
					}
					else
					{
						this._HoleId = default(int);
					}
					this.SendPropertyChanged("Hole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TeeTimeDetails(TeeTimeDetail entity)
		{
			this.SendPropertyChanging();
			entity.TeeTime = this;
		}
		
		private void detach_TeeTimeDetails(TeeTimeDetail entity)
		{
			this.SendPropertyChanging();
			entity.TeeTime = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Event")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _CourseId;
		
		private string _text;
		
		private System.DateTime _start;
		
		private System.DateTime _end;
		
		private EntitySet<ScoreCard> _ScoreCards;
		
		private EntitySet<EventDetail> _EventDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OnstartChanging(System.DateTime value);
    partial void OnstartChanged();
    partial void OnendChanging(System.DateTime value);
    partial void OnendChanged();
    #endregion
		
		public Event()
		{
			this._ScoreCards = new EntitySet<ScoreCard>(new Action<ScoreCard>(this.attach_ScoreCards), new Action<ScoreCard>(this.detach_ScoreCards));
			this._EventDetails = new EntitySet<EventDetail>(new Action<EventDetail>(this.attach_EventDetails), new Action<EventDetail>(this.detach_EventDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL")]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_start", DbType="DateTime NOT NULL")]
		public System.DateTime start
		{
			get
			{
				return this._start;
			}
			set
			{
				if ((this._start != value))
				{
					this.OnstartChanging(value);
					this.SendPropertyChanging();
					this._start = value;
					this.SendPropertyChanged("start");
					this.OnstartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[end]", Storage="_end", DbType="DateTime NOT NULL")]
		public System.DateTime end
		{
			get
			{
				return this._end;
			}
			set
			{
				if ((this._end != value))
				{
					this.OnendChanging(value);
					this.SendPropertyChanging();
					this._end = value;
					this.SendPropertyChanged("end");
					this.OnendChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_ScoreCard", Storage="_ScoreCards", ThisKey="id", OtherKey="EventId")]
		public EntitySet<ScoreCard> ScoreCards
		{
			get
			{
				return this._ScoreCards;
			}
			set
			{
				this._ScoreCards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventDetail", Storage="_EventDetails", ThisKey="id", OtherKey="EventId")]
		public EntitySet<EventDetail> EventDetails
		{
			get
			{
				return this._EventDetails;
			}
			set
			{
				this._EventDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ScoreCards(ScoreCard entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_ScoreCards(ScoreCard entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_EventDetails(EventDetail entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_EventDetails(EventDetail entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hole")]
	public partial class Hole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CourseId;
		
		private int _Nine;
		
		private int _Number;
		
		private string _PhotoUrl;
		
		private string _Description;
		
		private EntitySet<TeeTime> _TeeTimes;
		
		private EntitySet<ScoreEntry> _ScoreEntries;
		
		private EntitySet<EventDetail> _EventDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnNineChanging(int value);
    partial void OnNineChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    partial void OnPhotoUrlChanging(string value);
    partial void OnPhotoUrlChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Hole()
		{
			this._TeeTimes = new EntitySet<TeeTime>(new Action<TeeTime>(this.attach_TeeTimes), new Action<TeeTime>(this.detach_TeeTimes));
			this._ScoreEntries = new EntitySet<ScoreEntry>(new Action<ScoreEntry>(this.attach_ScoreEntries), new Action<ScoreEntry>(this.detach_ScoreEntries));
			this._EventDetails = new EntitySet<EventDetail>(new Action<EventDetail>(this.attach_EventDetails), new Action<EventDetail>(this.detach_EventDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL")]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nine", DbType="Int NOT NULL")]
		public int Nine
		{
			get
			{
				return this._Nine;
			}
			set
			{
				if ((this._Nine != value))
				{
					this.OnNineChanging(value);
					this.SendPropertyChanging();
					this._Nine = value;
					this.SendPropertyChanged("Nine");
					this.OnNineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int NOT NULL")]
		public int Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoUrl", DbType="NVarChar(MAX)")]
		public string PhotoUrl
		{
			get
			{
				return this._PhotoUrl;
			}
			set
			{
				if ((this._PhotoUrl != value))
				{
					this.OnPhotoUrlChanging(value);
					this.SendPropertyChanging();
					this._PhotoUrl = value;
					this.SendPropertyChanged("PhotoUrl");
					this.OnPhotoUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hole_TeeTime", Storage="_TeeTimes", ThisKey="Id", OtherKey="HoleId")]
		public EntitySet<TeeTime> TeeTimes
		{
			get
			{
				return this._TeeTimes;
			}
			set
			{
				this._TeeTimes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hole_ScoreEntry", Storage="_ScoreEntries", ThisKey="Id", OtherKey="HoleId")]
		public EntitySet<ScoreEntry> ScoreEntries
		{
			get
			{
				return this._ScoreEntries;
			}
			set
			{
				this._ScoreEntries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hole_EventDetail", Storage="_EventDetails", ThisKey="Id", OtherKey="StartHoleId")]
		public EntitySet<EventDetail> EventDetails
		{
			get
			{
				return this._EventDetails;
			}
			set
			{
				this._EventDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TeeTimes(TeeTime entity)
		{
			this.SendPropertyChanging();
			entity.Hole = this;
		}
		
		private void detach_TeeTimes(TeeTime entity)
		{
			this.SendPropertyChanging();
			entity.Hole = null;
		}
		
		private void attach_ScoreEntries(ScoreEntry entity)
		{
			this.SendPropertyChanging();
			entity.Hole = this;
		}
		
		private void detach_ScoreEntries(ScoreEntry entity)
		{
			this.SendPropertyChanging();
			entity.Hole = null;
		}
		
		private void attach_EventDetails(EventDetail entity)
		{
			this.SendPropertyChanging();
			entity.Hole = this;
		}
		
		private void detach_EventDetails(EventDetail entity)
		{
			this.SendPropertyChanging();
			entity.Hole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HoleList")]
	public partial class HoleList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CourseId;
		
		private string _Label;
		
		private string _HoleList1;
		
		private string _BList;
		
		private EntitySet<EventDetail> _EventDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnLabelChanging(string value);
    partial void OnLabelChanged();
    partial void OnHoleList1Changing(string value);
    partial void OnHoleList1Changed();
    partial void OnBListChanging(string value);
    partial void OnBListChanged();
    #endregion
		
		public HoleList()
		{
			this._EventDetails = new EntitySet<EventDetail>(new Action<EventDetail>(this.attach_EventDetails), new Action<EventDetail>(this.detach_EventDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL")]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Label", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Label
		{
			get
			{
				return this._Label;
			}
			set
			{
				if ((this._Label != value))
				{
					this.OnLabelChanging(value);
					this.SendPropertyChanging();
					this._Label = value;
					this.SendPropertyChanged("Label");
					this.OnLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="HoleList", Storage="_HoleList1", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string HoleList1
		{
			get
			{
				return this._HoleList1;
			}
			set
			{
				if ((this._HoleList1 != value))
				{
					this.OnHoleList1Changing(value);
					this.SendPropertyChanging();
					this._HoleList1 = value;
					this.SendPropertyChanged("HoleList1");
					this.OnHoleList1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BList", DbType="NVarChar(256)")]
		public string BList
		{
			get
			{
				return this._BList;
			}
			set
			{
				if ((this._BList != value))
				{
					this.OnBListChanging(value);
					this.SendPropertyChanging();
					this._BList = value;
					this.SendPropertyChanged("BList");
					this.OnBListChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HoleList_EventDetail", Storage="_EventDetails", ThisKey="Id", OtherKey="PlayListId")]
		public EntitySet<EventDetail> EventDetails
		{
			get
			{
				return this._EventDetails;
			}
			set
			{
				this._EventDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EventDetails(EventDetail entity)
		{
			this.SendPropertyChanging();
			entity.HoleList = this;
		}
		
		private void detach_EventDetails(EventDetail entity)
		{
			this.SendPropertyChanging();
			entity.HoleList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GlobalSettings")]
	public partial class GlobalSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _SettingName;
		
		private string _Value;
		
		private System.Data.Linq.Binary _LastWritten;
		
		private int _LastUserId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSettingNameChanging(string value);
    partial void OnSettingNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnLastWrittenChanging(System.Data.Linq.Binary value);
    partial void OnLastWrittenChanged();
    partial void OnLastUserIdChanging(int value);
    partial void OnLastUserIdChanged();
    #endregion
		
		public GlobalSetting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingName", DbType="NVarChar(128) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SettingName
		{
			get
			{
				return this._SettingName;
			}
			set
			{
				if ((this._SettingName != value))
				{
					this.OnSettingNameChanging(value);
					this.SendPropertyChanging();
					this._SettingName = value;
					this.SendPropertyChanged("SettingName");
					this.OnSettingNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(256) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastWritten", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastWritten
		{
			get
			{
				return this._LastWritten;
			}
			set
			{
				if ((this._LastWritten != value))
				{
					this.OnLastWrittenChanging(value);
					this.SendPropertyChanging();
					this._LastWritten = value;
					this.SendPropertyChanged("LastWritten");
					this.OnLastWrittenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUserId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LastUserId
		{
			get
			{
				return this._LastUserId;
			}
			set
			{
				if ((this._LastUserId != value))
				{
					this.OnLastUserIdChanging(value);
					this.SendPropertyChanging();
					this._LastUserId = value;
					this.SendPropertyChanged("LastUserId");
					this.OnLastUserIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ScoreEntry")]
	public partial class ScoreEntry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _HoleId;
		
		private int _ScoreCardId;
		
		private int _Score;
		
		private int _Ordinal;
		
		private EntityRef<Hole> _Hole;
		
		private EntityRef<ScoreCard> _ScoreCard;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnHoleIdChanging(int value);
    partial void OnHoleIdChanged();
    partial void OnScoreCardIdChanging(int value);
    partial void OnScoreCardIdChanged();
    partial void OnScoreChanging(int value);
    partial void OnScoreChanged();
    partial void OnOrdinalChanging(int value);
    partial void OnOrdinalChanged();
    #endregion
		
		public ScoreEntry()
		{
			this._Hole = default(EntityRef<Hole>);
			this._ScoreCard = default(EntityRef<ScoreCard>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoleId", DbType="Int NOT NULL")]
		public int HoleId
		{
			get
			{
				return this._HoleId;
			}
			set
			{
				if ((this._HoleId != value))
				{
					if (this._Hole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHoleIdChanging(value);
					this.SendPropertyChanging();
					this._HoleId = value;
					this.SendPropertyChanged("HoleId");
					this.OnHoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScoreCardId", DbType="Int NOT NULL")]
		public int ScoreCardId
		{
			get
			{
				return this._ScoreCardId;
			}
			set
			{
				if ((this._ScoreCardId != value))
				{
					if (this._ScoreCard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScoreCardIdChanging(value);
					this.SendPropertyChanging();
					this._ScoreCardId = value;
					this.SendPropertyChanged("ScoreCardId");
					this.OnScoreCardIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Int NOT NULL")]
		public int Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ordinal", DbType="Int NOT NULL")]
		public int Ordinal
		{
			get
			{
				return this._Ordinal;
			}
			set
			{
				if ((this._Ordinal != value))
				{
					this.OnOrdinalChanging(value);
					this.SendPropertyChanging();
					this._Ordinal = value;
					this.SendPropertyChanged("Ordinal");
					this.OnOrdinalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hole_ScoreEntry", Storage="_Hole", ThisKey="HoleId", OtherKey="Id", IsForeignKey=true)]
		public Hole Hole
		{
			get
			{
				return this._Hole.Entity;
			}
			set
			{
				Hole previousValue = this._Hole.Entity;
				if (((previousValue != value) 
							|| (this._Hole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hole.Entity = null;
						previousValue.ScoreEntries.Remove(this);
					}
					this._Hole.Entity = value;
					if ((value != null))
					{
						value.ScoreEntries.Add(this);
						this._HoleId = value.Id;
					}
					else
					{
						this._HoleId = default(int);
					}
					this.SendPropertyChanged("Hole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ScoreCard_ScoreEntry", Storage="_ScoreCard", ThisKey="ScoreCardId", OtherKey="Id", IsForeignKey=true)]
		public ScoreCard ScoreCard
		{
			get
			{
				return this._ScoreCard.Entity;
			}
			set
			{
				ScoreCard previousValue = this._ScoreCard.Entity;
				if (((previousValue != value) 
							|| (this._ScoreCard.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ScoreCard.Entity = null;
						previousValue.ScoreEntries.Remove(this);
					}
					this._ScoreCard.Entity = value;
					if ((value != null))
					{
						value.ScoreEntries.Add(this);
						this._ScoreCardId = value.Id;
					}
					else
					{
						this._ScoreCardId = default(int);
					}
					this.SendPropertyChanged("ScoreCard");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeeTimeDetail")]
	public partial class TeeTimeDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private bool _Cart;
		
		private bool _Pass;
		
		private decimal _AmountPaid;
		
		private int _TeeTimeId;
		
		private string _Division;
		
		private EntitySet<ScoreCard> _ScoreCards;
		
		private EntityRef<TeeTime> _TeeTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCartChanging(bool value);
    partial void OnCartChanged();
    partial void OnPassChanging(bool value);
    partial void OnPassChanged();
    partial void OnAmountPaidChanging(decimal value);
    partial void OnAmountPaidChanged();
    partial void OnTeeTimeIdChanging(int value);
    partial void OnTeeTimeIdChanged();
    partial void OnDivisionChanging(string value);
    partial void OnDivisionChanged();
    #endregion
		
		public TeeTimeDetail()
		{
			this._ScoreCards = new EntitySet<ScoreCard>(new Action<ScoreCard>(this.attach_ScoreCards), new Action<ScoreCard>(this.detach_ScoreCards));
			this._TeeTime = default(EntityRef<TeeTime>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cart", DbType="Bit NOT NULL")]
		public bool Cart
		{
			get
			{
				return this._Cart;
			}
			set
			{
				if ((this._Cart != value))
				{
					this.OnCartChanging(value);
					this.SendPropertyChanging();
					this._Cart = value;
					this.SendPropertyChanged("Cart");
					this.OnCartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pass", DbType="Bit NOT NULL")]
		public bool Pass
		{
			get
			{
				return this._Pass;
			}
			set
			{
				if ((this._Pass != value))
				{
					this.OnPassChanging(value);
					this.SendPropertyChanging();
					this._Pass = value;
					this.SendPropertyChanged("Pass");
					this.OnPassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountPaid", DbType="Money NOT NULL")]
		public decimal AmountPaid
		{
			get
			{
				return this._AmountPaid;
			}
			set
			{
				if ((this._AmountPaid != value))
				{
					this.OnAmountPaidChanging(value);
					this.SendPropertyChanging();
					this._AmountPaid = value;
					this.SendPropertyChanged("AmountPaid");
					this.OnAmountPaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeeTimeId", DbType="Int NOT NULL")]
		public int TeeTimeId
		{
			get
			{
				return this._TeeTimeId;
			}
			set
			{
				if ((this._TeeTimeId != value))
				{
					if (this._TeeTime.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeeTimeIdChanging(value);
					this.SendPropertyChanging();
					this._TeeTimeId = value;
					this.SendPropertyChanged("TeeTimeId");
					this.OnTeeTimeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Division", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string Division
		{
			get
			{
				return this._Division;
			}
			set
			{
				if ((this._Division != value))
				{
					this.OnDivisionChanging(value);
					this.SendPropertyChanging();
					this._Division = value;
					this.SendPropertyChanged("Division");
					this.OnDivisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeeTimeDetail_ScoreCard", Storage="_ScoreCards", ThisKey="Id", OtherKey="TeeTimeDetailId")]
		public EntitySet<ScoreCard> ScoreCards
		{
			get
			{
				return this._ScoreCards;
			}
			set
			{
				this._ScoreCards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeeTime_TeeTimeDetail", Storage="_TeeTime", ThisKey="TeeTimeId", OtherKey="Id", IsForeignKey=true)]
		public TeeTime TeeTime
		{
			get
			{
				return this._TeeTime.Entity;
			}
			set
			{
				TeeTime previousValue = this._TeeTime.Entity;
				if (((previousValue != value) 
							|| (this._TeeTime.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeeTime.Entity = null;
						previousValue.TeeTimeDetails.Remove(this);
					}
					this._TeeTime.Entity = value;
					if ((value != null))
					{
						value.TeeTimeDetails.Add(this);
						this._TeeTimeId = value.Id;
					}
					else
					{
						this._TeeTimeId = default(int);
					}
					this.SendPropertyChanged("TeeTime");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ScoreCards(ScoreCard entity)
		{
			this.SendPropertyChanging();
			entity.TeeTimeDetail = this;
		}
		
		private void detach_ScoreCards(ScoreCard entity)
		{
			this.SendPropertyChanging();
			entity.TeeTimeDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ScoreCard")]
	public partial class ScoreCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _EventId;
		
		private int _StartingHole;
		
		private string _Division;
		
		private string _Names;
		
		private int _TeeTimeDetailId;
		
		private EntitySet<ScoreEntry> _ScoreEntries;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<TeeTimeDetail> _TeeTimeDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEventIdChanging(int value);
    partial void OnEventIdChanged();
    partial void OnStartingHoleChanging(int value);
    partial void OnStartingHoleChanged();
    partial void OnDivisionChanging(string value);
    partial void OnDivisionChanged();
    partial void OnNamesChanging(string value);
    partial void OnNamesChanged();
    partial void OnTeeTimeDetailIdChanging(int value);
    partial void OnTeeTimeDetailIdChanged();
    #endregion
		
		public ScoreCard()
		{
			this._ScoreEntries = new EntitySet<ScoreEntry>(new Action<ScoreEntry>(this.attach_ScoreEntries), new Action<ScoreEntry>(this.detach_ScoreEntries));
			this._Event = default(EntityRef<Event>);
			this._TeeTimeDetail = default(EntityRef<TeeTimeDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Int NOT NULL")]
		public int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartingHole", DbType="Int NOT NULL")]
		public int StartingHole
		{
			get
			{
				return this._StartingHole;
			}
			set
			{
				if ((this._StartingHole != value))
				{
					this.OnStartingHoleChanging(value);
					this.SendPropertyChanging();
					this._StartingHole = value;
					this.SendPropertyChanged("StartingHole");
					this.OnStartingHoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Division", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string Division
		{
			get
			{
				return this._Division;
			}
			set
			{
				if ((this._Division != value))
				{
					this.OnDivisionChanging(value);
					this.SendPropertyChanging();
					this._Division = value;
					this.SendPropertyChanged("Division");
					this.OnDivisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Names", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Names
		{
			get
			{
				return this._Names;
			}
			set
			{
				if ((this._Names != value))
				{
					this.OnNamesChanging(value);
					this.SendPropertyChanging();
					this._Names = value;
					this.SendPropertyChanged("Names");
					this.OnNamesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeeTimeDetailId", DbType="Int NOT NULL")]
		public int TeeTimeDetailId
		{
			get
			{
				return this._TeeTimeDetailId;
			}
			set
			{
				if ((this._TeeTimeDetailId != value))
				{
					if (this._TeeTimeDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeeTimeDetailIdChanging(value);
					this.SendPropertyChanging();
					this._TeeTimeDetailId = value;
					this.SendPropertyChanged("TeeTimeDetailId");
					this.OnTeeTimeDetailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ScoreCard_ScoreEntry", Storage="_ScoreEntries", ThisKey="Id", OtherKey="ScoreCardId")]
		public EntitySet<ScoreEntry> ScoreEntries
		{
			get
			{
				return this._ScoreEntries;
			}
			set
			{
				this._ScoreEntries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_ScoreCard", Storage="_Event", ThisKey="EventId", OtherKey="id", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.ScoreCards.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.ScoreCards.Add(this);
						this._EventId = value.id;
					}
					else
					{
						this._EventId = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeeTimeDetail_ScoreCard", Storage="_TeeTimeDetail", ThisKey="TeeTimeDetailId", OtherKey="Id", IsForeignKey=true)]
		public TeeTimeDetail TeeTimeDetail
		{
			get
			{
				return this._TeeTimeDetail.Entity;
			}
			set
			{
				TeeTimeDetail previousValue = this._TeeTimeDetail.Entity;
				if (((previousValue != value) 
							|| (this._TeeTimeDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeeTimeDetail.Entity = null;
						previousValue.ScoreCards.Remove(this);
					}
					this._TeeTimeDetail.Entity = value;
					if ((value != null))
					{
						value.ScoreCards.Add(this);
						this._TeeTimeDetailId = value.Id;
					}
					else
					{
						this._TeeTimeDetailId = default(int);
					}
					this.SendPropertyChanged("TeeTimeDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ScoreEntries(ScoreEntry entity)
		{
			this.SendPropertyChanging();
			entity.ScoreCard = this;
		}
		
		private void detach_ScoreEntries(ScoreEntry entity)
		{
			this.SendPropertyChanging();
			entity.ScoreCard = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventDetail")]
	public partial class EventDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _EventId;
		
		private int _CourseId;
		
		private int _PlayFormat;
		
		private int _NumberOfHoles;
		
		private bool _IsShotgunStart;
		
		private string _Sponsor;
		
		private int _PlayListId;
		
		private int _OrgId;
		
		private int _StartHoleId;
		
		private int _NumGroups;
		
		private int _NumPerGroup;
		
		private string _SortOn;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<HoleList> _HoleList;
		
		private EntityRef<Hole> _Hole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEventIdChanging(int value);
    partial void OnEventIdChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnPlayFormatChanging(int value);
    partial void OnPlayFormatChanged();
    partial void OnNumberOfHolesChanging(int value);
    partial void OnNumberOfHolesChanged();
    partial void OnIsShotgunStartChanging(bool value);
    partial void OnIsShotgunStartChanged();
    partial void OnSponsorChanging(string value);
    partial void OnSponsorChanged();
    partial void OnPlayListIdChanging(int value);
    partial void OnPlayListIdChanged();
    partial void OnOrgIdChanging(int value);
    partial void OnOrgIdChanged();
    partial void OnStartHoleIdChanging(int value);
    partial void OnStartHoleIdChanged();
    partial void OnNumGroupsChanging(int value);
    partial void OnNumGroupsChanged();
    partial void OnNumPerGroupChanging(int value);
    partial void OnNumPerGroupChanged();
    partial void OnSortOnChanging(string value);
    partial void OnSortOnChanged();
    #endregion
		
		public EventDetail()
		{
			this._Event = default(EntityRef<Event>);
			this._HoleList = default(EntityRef<HoleList>);
			this._Hole = default(EntityRef<Hole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Int NOT NULL")]
		public int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL")]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayFormat", DbType="Int NOT NULL")]
		public int PlayFormat
		{
			get
			{
				return this._PlayFormat;
			}
			set
			{
				if ((this._PlayFormat != value))
				{
					this.OnPlayFormatChanging(value);
					this.SendPropertyChanging();
					this._PlayFormat = value;
					this.SendPropertyChanged("PlayFormat");
					this.OnPlayFormatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfHoles", DbType="Int NOT NULL")]
		public int NumberOfHoles
		{
			get
			{
				return this._NumberOfHoles;
			}
			set
			{
				if ((this._NumberOfHoles != value))
				{
					this.OnNumberOfHolesChanging(value);
					this.SendPropertyChanging();
					this._NumberOfHoles = value;
					this.SendPropertyChanged("NumberOfHoles");
					this.OnNumberOfHolesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsShotgunStart", DbType="Bit NOT NULL")]
		public bool IsShotgunStart
		{
			get
			{
				return this._IsShotgunStart;
			}
			set
			{
				if ((this._IsShotgunStart != value))
				{
					this.OnIsShotgunStartChanging(value);
					this.SendPropertyChanging();
					this._IsShotgunStart = value;
					this.SendPropertyChanged("IsShotgunStart");
					this.OnIsShotgunStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sponsor", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Sponsor
		{
			get
			{
				return this._Sponsor;
			}
			set
			{
				if ((this._Sponsor != value))
				{
					this.OnSponsorChanging(value);
					this.SendPropertyChanging();
					this._Sponsor = value;
					this.SendPropertyChanged("Sponsor");
					this.OnSponsorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayListId", DbType="Int NOT NULL")]
		public int PlayListId
		{
			get
			{
				return this._PlayListId;
			}
			set
			{
				if ((this._PlayListId != value))
				{
					if (this._HoleList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayListIdChanging(value);
					this.SendPropertyChanging();
					this._PlayListId = value;
					this.SendPropertyChanged("PlayListId");
					this.OnPlayListIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgId", DbType="Int NOT NULL")]
		public int OrgId
		{
			get
			{
				return this._OrgId;
			}
			set
			{
				if ((this._OrgId != value))
				{
					this.OnOrgIdChanging(value);
					this.SendPropertyChanging();
					this._OrgId = value;
					this.SendPropertyChanged("OrgId");
					this.OnOrgIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartHoleId", DbType="Int NOT NULL")]
		public int StartHoleId
		{
			get
			{
				return this._StartHoleId;
			}
			set
			{
				if ((this._StartHoleId != value))
				{
					if (this._Hole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStartHoleIdChanging(value);
					this.SendPropertyChanging();
					this._StartHoleId = value;
					this.SendPropertyChanged("StartHoleId");
					this.OnStartHoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumGroups", DbType="Int NOT NULL")]
		public int NumGroups
		{
			get
			{
				return this._NumGroups;
			}
			set
			{
				if ((this._NumGroups != value))
				{
					this.OnNumGroupsChanging(value);
					this.SendPropertyChanging();
					this._NumGroups = value;
					this.SendPropertyChanged("NumGroups");
					this.OnNumGroupsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumPerGroup", DbType="Int NOT NULL")]
		public int NumPerGroup
		{
			get
			{
				return this._NumPerGroup;
			}
			set
			{
				if ((this._NumPerGroup != value))
				{
					this.OnNumPerGroupChanging(value);
					this.SendPropertyChanging();
					this._NumPerGroup = value;
					this.SendPropertyChanged("NumPerGroup");
					this.OnNumPerGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortOn", DbType="NChar(20)")]
		public string SortOn
		{
			get
			{
				return this._SortOn;
			}
			set
			{
				if ((this._SortOn != value))
				{
					this.OnSortOnChanging(value);
					this.SendPropertyChanging();
					this._SortOn = value;
					this.SendPropertyChanged("SortOn");
					this.OnSortOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventDetail", Storage="_Event", ThisKey="EventId", OtherKey="id", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.EventDetails.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.EventDetails.Add(this);
						this._EventId = value.id;
					}
					else
					{
						this._EventId = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HoleList_EventDetail", Storage="_HoleList", ThisKey="PlayListId", OtherKey="Id", IsForeignKey=true)]
		public HoleList HoleList
		{
			get
			{
				return this._HoleList.Entity;
			}
			set
			{
				HoleList previousValue = this._HoleList.Entity;
				if (((previousValue != value) 
							|| (this._HoleList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HoleList.Entity = null;
						previousValue.EventDetails.Remove(this);
					}
					this._HoleList.Entity = value;
					if ((value != null))
					{
						value.EventDetails.Add(this);
						this._PlayListId = value.Id;
					}
					else
					{
						this._PlayListId = default(int);
					}
					this.SendPropertyChanged("HoleList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hole_EventDetail", Storage="_Hole", ThisKey="StartHoleId", OtherKey="Id", IsForeignKey=true)]
		public Hole Hole
		{
			get
			{
				return this._Hole.Entity;
			}
			set
			{
				Hole previousValue = this._Hole.Entity;
				if (((previousValue != value) 
							|| (this._Hole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hole.Entity = null;
						previousValue.EventDetails.Remove(this);
					}
					this._Hole.Entity = value;
					if ((value != null))
					{
						value.EventDetails.Add(this);
						this._StartHoleId = value.Id;
					}
					else
					{
						this._StartHoleId = default(int);
					}
					this.SendPropertyChanged("Hole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
